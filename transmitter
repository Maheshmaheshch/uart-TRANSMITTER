`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 07/19/2023 10:52:22 AM
// Design Name: 
// Module Name: transmitter
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module transmiter(input [7:0]din,
                    input tx_start,
                    input clk,
                    input rst,
                    input br_tick,
                    output reg tx,
                    output reg done);
 reg [3:0]counter;
 reg [1:0]pstate,nstate;
 reg [7:0]data_reg;
 reg [3:0]nbit;
parameter idle =2'b00,start=2'b01,data=2'b10,stop=2'b11;

always@(*)
begin
if(rst) begin
nstate<=idle;
counter<=0;
nbit<=0; 
data_reg<=0;
end
else begin 
pstate=nstate;
    case(nstate)
    idle : begin
            tx=1;
            done=0;
            if(tx_start) begin
            counter=0;
            data_reg=din;
            nbit=0;
            nstate=start; end
            else
                nstate=idle;
           end
     
    start: begin
            tx=0;
            if(br_tick) begin
                if(counter==4'd15) begin
                nstate=data;
                counter=0;
                nbit=0;
                 end
                else begin
                counter=counter+1;
                nstate=start; end
            end
            else
            nstate=start;
            end
data : begin
                tx = data_reg[0];
                if(br_tick) begin
                    if(counter ==4'd15) begin
                        counter = 0;
                        data_reg= data_reg >> 1;
                        nbit=nbit+1;
                        if(nbit >=4'd7)
                            nstate = stop;
                       
                    end
                    
                    else begin
                        counter = counter + 1;
                        nstate=data; end
    end        
    end
  stop : begin
            tx=1;
            if(br_tick) begin
                if(counter==4'd15) begin
                    done=1;
                    nstate=idle; end
                 else begin
                        counter=counter+1;
                        nstate=stop; end
             end
             else
                nstate=stop;
          end
   endcase
   end
 end                     
            
endmodule


                                      
